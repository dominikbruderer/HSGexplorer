# ui_components.py
"""
Funktionen zur Erstellung von UI-Komponenten f√ºr die explore-it Streamlit App.

Dieses Modul enth√§lt Funktionen, die f√ºr die Erzeugung spezifischer Teile
der Benutzeroberfl√§che verantwortlich sind (z.B. Sidebar, Karte, Detailansicht).
Ziel ist es, die UI-Logik von der Hauptanwendungslogik (`app.py`) zu trennen.
Die Funktionen nutzen Streamlit-Widgets und -Layouts sowie externe Bibliotheken
wie streamlit-folium und Plotly zur Visualisierung.
"""

import streamlit as st
import pandas as pd
import datetime
import os
import folium # F√ºr die Kartenerstellung
import plotly.graph_objects as go # F√ºr Diagramme
from streamlit_folium import st_folium # Zur Anzeige von Folium-Karten in Streamlit
from typing import List, Dict, Any, Optional, Union, Callable, Tuple # F√ºr Type Hints

# Importiere Konstanten und Konfigurationen
try:
    import config
    # Importiere spezifische Konstanten f√ºr Lesbarkeit (optional, aber kann helfen)
    from config import (
        LOGO_PATH, STATE_SHOW_LLM_RESULTS, STATE_SELECTED_ACTIVITY_INDEX,
        ST_GALLEN_LAT, ST_GALLEN_LON, COL_ID, COL_ART, COL_PREIS, COL_ORT,
        COL_NAME, COL_LAT, COL_LON, COL_WETTER_PREF, COL_DATUM_VON, COL_DATUM_BIS,
        COL_BESCHREIBUNG, COL_ZIELGRUPPE,
        COL_INDOOR_OUTDOOR, COL_DAUER_INFO, COL_WEBSITE, COL_BOOKING_INFO,
        COL_KONTAKT_TEL, COL_IMAGE_URL
    )
except ImportError:
    st.error("Fehler: config.py konnte nicht importiert werden (ui_components.py).")
    # Definiere Fallback-Werte, um Abst√ºrze zu vermeiden, aber Funktionalit√§t ist beeintr√§chtigt
    LOGO_PATH = "logo.png"; STATE_SHOW_LLM_RESULTS = 'show_llm_results'; STATE_SELECTED_ACTIVITY_INDEX = 'selected_activity_index';
    ST_GALLEN_LAT, ST_GALLEN_LON = 47.4239, 9.3794; COL_ID = 'ID'; COL_ART = 'Art'; COL_PREIS = 'Preis_Ca'; COL_ORT = 'Ort_Name';
    COL_NAME = 'Name'; COL_LAT = 'Latitude'; COL_LON = 'Longitude'; COL_WETTER_PREF = 'Wetter_Praeferenz'; COL_DATUM_VON = 'Datum_Von';
    COL_DATUM_BIS = 'Datum_Bis'; COL_BESCHREIBUNG = 'Beschreibung'; COL_PERSONEN_MIN = 'Personen_Min'; COL_PERSONEN_MAX = 'Personen_Max';
    COL_ZIELGRUPPE = 'Zielgruppe'; COL_INDOOR_OUTDOOR = 'Indoor_Outdoor'; COL_DAUER_INFO = 'Dauer_Info'; COL_WEBSITE = 'Website';
    COL_BOOKING_INFO = 'Booking_Info'; COL_KONTAKT_TEL = 'Kontakt_Telefon'; COL_IMAGE_URL = 'Image_URL';


def display_sidebar(
    df: pd.DataFrame,
    today_date: datetime.date,
    openweathermap_api_configured: bool
    ) -> Tuple[datetime.date, bool, str, Optional[float], bool]:
    """
    Erstellt und zeigt die Streamlit Sidebar an und gibt die Filterwerte zur√ºck.

    Die Sidebar enth√§lt das Logo, die Datumsauswahl, die Wetter-Checkbox
    und die manuellen Filter f√ºr Aktivit√§tsart, Personenzahl und Budget.
    Sie gibt die vom Nutzer ausgew√§hlten Werte zur√ºck.

    Args:
        df (pd.DataFrame): Der DataFrame mit allen Aktivit√§ten (wird ben√∂tigt, um
                           dynamisch Filteroptionen zu generieren, z.B. f√ºr Aktivit√§tsart).
        today_date (datetime.date): Das heutige Datum (als Startwert f√ºr Datumsauswahl).
        openweathermap_api_configured (bool): Flag, ob die Wetter-API konfiguriert ist
                                            (um die Wetter-Checkbox ggf. zu deaktivieren).

    Returns:
        Tuple[datetime.date, bool, str, str, Optional[float], bool]:
        Ein Tupel mit den ausgew√§hlten Werten:
        - selected_date: Das vom Nutzer gew√§hlte Datum.
        - consider_weather: Boolean, ob die Wetter-Checkbox aktiviert ist.
        - activity_type: Ausgew√§hlte Aktivit√§tsart ("Alle" oder spezifische Art).
        - people_count: Ausgew√§hlte Personenkategorie ("Alle", "Alleine", etc.).
        - budget: Ausgew√§hltes maximales Budget (Zahl) oder None.
        - reset_llm_pressed: Boolean, ob der "Manuelle Filter verwenden"-Button gedr√ºckt wurde.
    """
    with st.sidebar: # Alles innerhalb dieses Blocks erscheint in der Sidebar
        # --- Logo ---
        if os.path.exists(LOGO_PATH):
            st.image(LOGO_PATH, width=200) # Zeige Logo, wenn Datei existiert

        # --- Datumsauswahl ---
        st.header("üóìÔ∏è Datum & Filter")
        selected_date = st.date_input(
            "Datum w√§hlen", value=today_date, min_value=today_date, key="date_input_sidebar"
        )

        # --- Wetterfilter Checkbox ---
        st.header("‚öôÔ∏è Aktivit√§ten filtern")
        consider_weather = st.checkbox(
            "Nach Wetter filtern", value=True, # Standardm√§√üig aktiviert
            help="Filtert Aktivit√§ten basierend auf der Wettervorhersage und ihrer Pr√§ferenz.",
            disabled=not openweathermap_api_configured, # Deaktivieren, wenn kein Wetter-API-Key da ist
            key="sb_wetter" # Eindeutiger Schl√ºssel f√ºr dieses Widget
        )

        # --- Button, um vom LLM-Modus zur√ºck zu manuellen Filtern zu wechseln ---
        reset_llm_pressed = False
        # Zeige Button nur an, wenn gerade LLM-Ergebnisse angezeigt werden (erkennbar am Session State)
        if st.session_state.get(STATE_SHOW_LLM_RESULTS):
            if st.button("Manuelle Filter verwenden", key="btn_reset_llm_sidebar"):
                reset_llm_pressed = True # Merken, dass der Button geklickt wurde

        # --- Manuelle Filter Widgets (Dropdowns, Slider) ---
        # Initialisiere Standardwerte
        activity_type = "Alle"; budget = None

        # Zeige Filter nur an, wenn Aktivit√§tsdaten vorhanden sind
        if not df.empty:
            # Aktivit√§tsart Filter (Dropdown)
            if COL_ART in df.columns:
                try:
                    # Hole alle einzigartigen Aktivit√§tsarten aus den Daten, sortiere sie
                    unique_arts = sorted(df[COL_ART].dropna().astype(str).unique())
                    # Erstelle die Optionen f√ºr das Dropdown ("Alle" + gefundene Arten)
                    activity_types_options = ["Alle"] + unique_arts
                except Exception as e:
                    # Fallback, falls etwas beim Holen der Arten schiefgeht
                    # print(f"Fehler beim Extrahieren der Aktivit√§tsarten: {e}") # Debug
                    activity_types_options = ["Alle"]
                # Erstelle das Dropdown-Widget
                activity_type = st.selectbox("Aktivit√§tsart", options=activity_types_options, key="sb_art")
            else:
                 st.caption(f"Spalte '{COL_ART}' fehlt."); st.selectbox("Aktivit√§tsart", ["Alle"], disabled=True, key="sb_art_disabled")

            # Budget Filter (Slider)
            # Pr√ºfe, ob die Preis-Spalte existiert und mindestens einen Wert enth√§lt
            if COL_PREIS in df.columns and df[COL_PREIS].notna().any():
                # F√ºlle fehlende Preise mit 0 f√ºr Min/Max-Berechnung
                preis_col_filled = df[COL_PREIS].fillna(0)
                min_price_default, max_price_default = 0, 150 # Standard-Range f√ºr Slider
                try:
                    # Finde den minimalen und maximalen Preis in den Daten
                    min_val = preis_col_filled.min(); max_val = preis_col_filled.max()
                    # Setze sichere Grenzen f√ºr den Slider
                    min_price = int(min_val) if pd.notna(min_val) and min_val >= 0 else min_price_default
                    max_price = int(max_val) if pd.notna(max_val) and max_val > 0 else max_price_default
                    if min_price > max_price: min_price = max_price # Sicherstellen, dass min <= max
                    # Erstelle den Slider; Standardwert ist der Maximalpreis
                    budget = st.slider("Max. Budget (CHF)", min_value=min_price, max_value=max_price, value=max_price, key="sb_budget")
                except Exception as e:
                    # Fallback, wenn bei Preisberechnung Fehler auftreten
                    st.warning(f"Fehler bei Budget-Slider: {e}. Verwende Standard.")
                    budget = st.slider("Max. Budget (CHF)", min_price_default, max_price_default, max_price_default, key="sb_budget_error")
            else:
                 st.caption("Keine Preisdaten f√ºr Budget-Filter verf√ºgbar."); st.slider("Max. Budget (CHF)", 0, 1, 0, disabled=True, key="sb_budget_disabled_fallback"); budget = None
        else: # Fall: df ist leer
             st.warning("Keine Aktivit√§tsdaten geladen. Filter deaktiviert.")
             # Zeige deaktivierte Filter-Widgets an
             st.selectbox("Aktivit√§tsart", ["Alle"], disabled=True, key="sb_art_disabled_empty")
             st.slider("Max. Budget (CHF)", 0, 1, 0, disabled=True, key="sb_budget_disabled_empty")

    # Gib die ausgew√§hlten Werte zur√ºck, damit sie in app.py verwendet werden k√∂nnen
    return selected_date, consider_weather, activity_type, budget, reset_llm_pressed


def display_map(
    df_for_map: pd.DataFrame,
    selected_activity_id: Optional[int] = None # Optional: ID der Aktivit√§t, die hervorgehoben werden soll
    ) -> None:
    """
    Erstellt und zeigt eine interaktive Folium-Karte mit Aktivit√§ts-Markern an.

    Zeigt die Aktivit√§ten aus dem √ºbergebenen DataFrame als Marker auf einer Karte.
    Hebt optional eine ausgew√§hlte Aktivit√§t hervor und zentriert die Karte darauf.

    Args:
        df_for_map (pd.DataFrame): DataFrame mit den Aktivit√§ten, die angezeigt werden sollen
                                   (muss COL_LAT, COL_LON, COL_ID, COL_NAME enthalten).
        selected_activity_id (Optional[int]): ID der Aktivit√§t, die auf der Karte
                                            hervorgehoben und zentriert werden soll.
    """
    st.subheader("Karte der Aktivit√§ten")
    # Standard-Kartenzentrum (St. Gallen) und Zoomstufe
    map_center = [ST_GALLEN_LAT, ST_GALLEN_LON]; map_zoom = 11

    # Pr√ºfe, ob Daten und ben√∂tigte Spalten vorhanden sind
    required_map_cols = [COL_LAT, COL_LON, COL_ID, COL_NAME]
    if df_for_map.empty or not all(col in df_for_map.columns for col in required_map_cols):
         st.warning("Karte kann nicht angezeigt werden: Daten oder notwendige Spalten (Lat/Lon/ID/Name) fehlen.")
         # Zeige leere Karte als Fallback
         m = folium.Map(location=map_center, zoom_start=map_zoom, tiles='CartoDB positron')
         # Zeige die Folium-Karte in Streamlit an
         st_folium(m, height=500, key="folium_map_empty", use_container_width=True, returned_objects=[])
         return # Beende die Funktion hier

    # Berechne das Zentrum und den Zoom basierend auf den angezeigten Aktivit√§ten
    valid_coords = df_for_map[[COL_LAT, COL_LON]].dropna() # Ignoriere Aktivit√§ten ohne Koordinaten
    if not valid_coords.empty:
        try:
             # Zentriere Karte auf den Durchschnitt der Koordinaten
             map_center = [valid_coords[COL_LAT].mean(), valid_coords[COL_LON].mean()]
             # Passe Zoomstufe an Anzahl der Aktivit√§ten an
             num_activities = len(valid_coords)
             if num_activities == 1: map_zoom = 14 # N√§her ran bei nur einer Aktivit√§t
             elif num_activities < 10: map_zoom = 12
             else: map_zoom = 11 # Weiter weg bei vielen Aktivit√§ten
        except Exception as e:
            # print(f"Warnung: Fehler bei Berechnung des Kartenzentrums/Zooms: {e}") # Debug
            pass # Verwende Standardwerte im Fehlerfall

    # Wenn eine Aktivit√§t ausgew√§hlt ist, zentriere die Karte darauf und zoome n√§her heran
    if selected_activity_id is not None:
        selected_row = df_for_map[df_for_map[COL_ID] == selected_activity_id]
        if not selected_row.empty:
            try:
                sel_lat = selected_row.iloc[0][COL_LAT]; sel_lon = selected_row.iloc[0][COL_LON]
                if pd.notna(sel_lat) and pd.notna(sel_lon):
                     map_center = [float(sel_lat), float(sel_lon)]; map_zoom = 15 # Starker Zoom auf Auswahl
            except Exception as e:
                # print(f"Warnung: Fehler beim Zentrieren auf ID {selected_activity_id}: {e}") # Debug
                pass # Verwende vorher berechnete Werte im Fehlerfall

    # Erstelle das Folium-Kartenobjekt
    # 'CartoDB positron' ist ein heller, unaufdringlicher Kartenstil
    m = folium.Map(location=map_center, zoom_start=map_zoom, tiles='CartoDB positron')

    # F√ºge f√ºr jede Aktivit√§t einen Marker zur Karte hinzu
    for index, row in df_for_map.iterrows():
        # Hole Daten f√ºr den Marker (verwende .get() f√ºr Sicherheit gegen fehlende Spalten)
        lat = row.get(COL_LAT); lon = row.get(COL_LON); activity_id = row.get(COL_ID)
        name = row.get(COL_NAME, 'N/A'); art = row.get(COL_ART, 'N/A'); ort = row.get(COL_ORT, 'N/A')
        weather_note = row.get('weather_note') # Wetterhinweis aus logic.py

        # F√ºge Marker nur hinzu, wenn Koordinaten g√ºltig sind
        if pd.notna(lat) and pd.notna(lon):
            try:
                # Style f√ºr den Marker: Rot/Stern f√ºr ausgew√§hlte, Blau/Info f√ºr andere
                is_selected = (activity_id == selected_activity_id)
                icon_color = 'red' if is_selected else 'blue'
                icon_symbol = 'star' if is_selected else 'info-sign'
                # Text, der beim Hovern erscheint (Tooltip)
                tooltip_text = f"<b>{name}</b>"
                # Text/HTML, das im Popup erscheint, wenn man klickt
                popup_html = f"<b>{name}</b><br>Art: {art}<br>Ort: {ort}"
                # F√ºge Wetterhinweis zum Tooltip hinzu, falls vorhanden
                if pd.notna(weather_note): tooltip_text += f"<br>{weather_note}"

                # Erstelle den Marker und f√ºge ihn zur Karte 'm' hinzu
                folium.Marker(
                    location=[float(lat), float(lon)],
                    popup=folium.Popup(popup_html, max_width=250), # Begrenze Popup-Breite
                    tooltip=tooltip_text,
                    icon=folium.Icon(color=icon_color, icon=icon_symbol, prefix='glyphicon') # Bootstrap Glyphs
                ).add_to(m)
            except Exception as e:
                # print(f"Warnung: Fehler beim Hinzuf√ºgen des Markers f√ºr ID {activity_id} ({name}): {e}") # Debug
                pass # √úberspringe Marker im Fehlerfall

    # Zeige die fertige Folium-Karte in der Streamlit-App an
    st_folium(m, height=500, key="folium_map_main", use_container_width=True, returned_objects=[])


def display_weather_overview(
    location_name: str, # Name des Ortes (z.B. "St. Gallen")
    target_date: Optional[datetime.date], # Das Datum, f√ºr das die √úbersicht gilt
    forecast_list: Optional[List[Dict[str, Any]]], # Liste der Wettervorhersagen (von weather_utils)
    api_configured: bool # Ist der Wetter-API Key konfiguriert?
    ) -> None:
    """
    Zeigt eine Wetter√ºbersicht f√ºr einen bestimmten Ort und Tag an.

    Stellt die repr√§sentative Wetterlage (Temperatur, Beschreibung, Icon) dar
    und optional einen Temperatur-Tagesverlauf als Liniendiagramm sowie eine
    kleine Tabelle mit st√ºndlichen Vorhersagen.

    Args:
        location_name (str): Name des Ortes f√ºr die √úberschrift.
        target_date (Optional[datetime.date]): Das Zieldatum f√ºr die √úbersicht.
        forecast_list (Optional[List[Dict[str, Any]]]): Die Wetterdatenliste von
                                                     `get_weather_forecast_for_day`.
        api_configured (bool): Ob der OpenWeatherMap API Key konfiguriert ist.
    """
    st.subheader(f"Wetter√ºbersicht {location_name}")
    if not target_date:
        st.markdown("###### W√§hle ein Datum in der Sidebar."); return

    st.markdown(f"###### {target_date.strftime('%A, %d. %B %Y')}") # Zeige Datum formatiert an

    # Finde eine repr√§sentative Vorhersage f√ºr die Hauptanzeige (Temperatur/Icon)
    # (Logik √§hnlich wie in weather_utils.check_activity_weather_status)
    representative_forecast = None
    if forecast_list:
        try:
            valid_forecasts = [f for f in forecast_list if isinstance(f.get('datetime'), datetime.datetime)]
            if valid_forecasts:
                representative_forecast = next((f for f in valid_forecasts if f['datetime'].hour >= 12), valid_forecasts[0])
        except Exception: pass # Ignoriere Fehler bei der Auswahl

    # Zeige Haupt-Wetterinfo (Temp/Icon/Beschreibung)
    if representative_forecast:
        temp = representative_forecast.get('temp'); desc = representative_forecast.get('description'); icon = representative_forecast.get('icon')
        # Formatiere Werte f√ºr Anzeige (mit Fallbacks f√ºr fehlende Daten)
        temp_str = f"{temp:.1f}¬∞C" if pd.notna(temp) else "N/A"
        desc_str = desc.capitalize() if pd.notna(desc) else "N/A"
        icon_url = f"http://openweathermap.org/img/wn/{icon}@2x.png" if pd.notna(icon) else None
        # Zeige Icon und Metrik nebeneinander an
        subcol1, subcol2 = st.columns([0.3, 0.7])
        with subcol1:
            if icon_url: st.image(icon_url, width=60)
        with subcol2:
            # st.metric zeigt eine Zahl gro√ü an, mit einem Label dar√ºber
            st.metric(label=desc_str, value=temp_str)
    elif api_configured:
        # Zeige Meldung, wenn API konfiguriert ist, aber keine Daten da sind
        st.info(f"Wetterdaten f√ºr {location_name} am {target_date.strftime('%d.%m.')} nicht verf√ºgbar.")
    elif location_name:
        # Zeige Meldung, wenn API nicht konfiguriert ist
        st.caption("Kein OpenWeatherMap API Key konfiguriert.")

    # Zeige optional den Temperatur-Tagesverlauf und eine st√ºndliche Tabelle
    if forecast_list:
        st.markdown(f"###### Tagesverlauf (UTC)")
        try:
            # Bereite Daten f√ºr das Liniendiagramm vor
            forecast_df_display = pd.DataFrame(forecast_list)
            # Pr√ºfe, ob ben√∂tigte Spalten da sind und Daten enthalten
            if not forecast_df_display.empty and 'datetime' in forecast_df_display.columns and 'temp' in forecast_df_display.columns and forecast_df_display['temp'].notna().any():
                # Wandle 'datetime' sicher um und setze es als Index f√ºr das Diagramm
                forecast_df_display['datetime'] = pd.to_datetime(forecast_df_display['datetime'], errors='coerce', utc=True)
                forecast_df_display.dropna(subset=['datetime', 'temp'], inplace=True) # Entferne Zeilen mit fehlenden Werten
                if not forecast_df_display.empty:
                    forecast_df_display.set_index('datetime', inplace=True)
                    # Zeige das Liniendiagramm nur f√ºr die Temperatur
                    st.line_chart(forecast_df_display[['temp']], use_container_width=True, height=150)

                    # Erstelle eine kleine Tabelle mit Vorhersagen zu bestimmten Zeiten (z.B. 9, 12, 15, 18 Uhr UTC)
                    st.caption("Vorhersage-√úberblick (ca.):")
                    target_hours_utc = [9, 12, 15, 18]; hourly_summary = []; processed_times = set()
                    for hour_utc in target_hours_utc:
                        # Finde die Vorhersage, die zeitlich am n√§chsten zur Zielstunde liegt
                        target_time_utc = datetime.datetime.combine(target_date, datetime.time(hour_utc), tzinfo=datetime.timezone.utc)
                        try:
                            # Finde den Index der n√§chsten Zeit im DataFrame
                            nearest_index_loc = forecast_df_display.index.get_indexer([target_time_utc], method='nearest')[0]
                            closest_forecast_row = forecast_df_display.iloc[nearest_index_loc]
                            actual_time_utc = closest_forecast_row.name # Echte Zeit der Vorhersage
                            forecast_time_str = actual_time_utc.strftime('%H:%M')
                            # Verhindere doppelte Eintr√§ge, falls mehrere Zielstunden auf dieselbe Vorhersage zeigen
                            if forecast_time_str not in processed_times:
                                temp_val = closest_forecast_row.get('temp')
                                desc_val = closest_forecast_row.get('description')
                                # F√ºge formatierte Daten zur Liste f√ºr die Tabelle hinzu
                                hourly_summary.append({
                                    "Zeit (UTC)": forecast_time_str,
                                    "¬∞C": f"{temp_val:.0f}¬∞" if pd.notna(temp_val) else "?",
                                    "Wetter": str(desc_val).capitalize() if pd.notna(desc_val) else "N/A"
                                })
                                processed_times.add(forecast_time_str)
                        except Exception: pass # Ignoriere Fehler beim Finden einzelner Stunden

                    # Zeige die zusammengefasste Tabelle an, wenn Daten vorhanden sind
                    summary_df_display = pd.DataFrame(hourly_summary)
                    if not summary_df_display.empty:
                         st.dataframe(
                             summary_df_display,
                             use_container_width=True,
                             hide_index=True,
                             # Konfiguriere Spaltenbreiten etc. f√ºr bessere Darstellung
                             column_config={
                                 "Zeit (UTC)": st.column_config.TextColumn("Zeit (UTC)", width="small"),
                                 "¬∞C": st.column_config.TextColumn("Temp.", width="small"),
                                 "Wetter": st.column_config.TextColumn("Beschreibung", width="large")
                             }
                         )
        except Exception as e:
             # Catchall f√ºr Fehler bei der Diagramm/Tabellen-Erstellung
             st.error(f"Fehler bei Darstellung des Wetter-Tagesverlaufs ({location_name}): {e}")


# In ui_components.py

def display_activity_details(
    activity_row: pd.Series, # Eine Zeile aus dem Aktivit√§ten-DataFrame
    activity_id: int, # Die ID der Aktivit√§t
    is_expanded: bool, # Soll der Expander standardm√§√üig ge√∂ffnet sein?
    openweathermap_api_configured: bool, # Ist Wetter-API konfiguriert?
    key_prefix: str = "" # Ein Pr√§fix f√ºr eindeutige Widget-Keys
    ) -> None:
    """
    Zeigt die Details einer einzelnen Aktivit√§t in einem aufklappbaren Bereich (Expander).

    Stellt formatierte Informationen zur Aktivit√§t dar, inklusive Wetter am Standort
    (falls verf√ºgbar), Buttons f√ºr externe Links (Website, Maps) und einen Button,
    um diese Aktivit√§t auf der Karte zu fokussieren. (Layout angepasst an urspr√ºngliche Version).

    Args:
        activity_row (pd.Series): Die Datenzeile der anzuzeigenden Aktivit√§t.
        activity_id (int): Die ID der Aktivit√§t (wichtig f√ºr Keys und State).
        is_expanded (bool): Ob der Expander standardm√§√üig ge√∂ffnet sein soll.
        openweathermap_api_configured (bool): Flag f√ºr Wetter-API-Status.
        key_prefix (str): Pr√§fix, um sicherzustellen, dass die Keys der Buttons etc.
                          innerhalb des Expanders eindeutig sind (z.B. "llm" oder "filter").
    """
    # --- Daten sicher aus der Reihe extrahieren ---
    # (Dieser Teil bleibt unver√§ndert)
    name = activity_row.get(config.COL_NAME, 'Unbekannt')
    art_str = activity_row.get(config.COL_ART, "Typ N/A")
    ort_str = activity_row.get(config.COL_ORT, "Ort N/A")
    preis_ca_val = activity_row.get(config.COL_PREIS)
    beschreibung_str = activity_row.get(config.COL_BESCHREIBUNG, "Keine Beschreibung verf√ºgbar.")
    image_url = activity_row.get(config.COL_IMAGE_URL)
    website_str = activity_row.get(config.COL_WEBSITE)
    latitude = activity_row.get(config.COL_LAT); longitude = activity_row.get(config.COL_LON)
    dauer_str = activity_row.get(config.COL_DAUER_INFO, "N/A")
    zielgruppe_str = activity_row.get(config.COL_ZIELGRUPPE)
    indoor_outdoor_str = activity_row.get(config.COL_INDOOR_OUTDOOR, "N/A")
    wetter_pref_str = activity_row.get(config.COL_WETTER_PREF, "N/A")
    von_datum = activity_row.get(config.COL_DATUM_VON); bis_datum = activity_row.get(config.COL_DATUM_BIS)
    booking_str = activity_row.get(config.COL_BOOKING_INFO)
    kontakt_str = activity_row.get(config.COL_KONTAKT_TEL)
    loc_temp_val = activity_row.get('location_temp')
    loc_desc_val = activity_row.get('location_desc')
    loc_icon_val = activity_row.get('location_icon')
    weather_note = activity_row.get('weather_note')

    # --- Werte f√ºr die Anzeige formatieren ---
    if pd.notna(preis_ca_val):
        if preis_ca_val > 0: preis_str = f"{preis_ca_val:.2f} CHF"
        else: preis_str = "Kostenlos"
    else: preis_str = "Preis N/A"
    try:
        von_str = von_datum.strftime('%d.%m.%Y') if pd.notna(von_datum) else None
        bis_str = bis_datum.strftime('%d.%m.%Y') if pd.notna(bis_datum) else None
        if von_str and bis_str: verfuegbar_str = f"{von_str} - {bis_str}"
        elif von_str: verfuegbar_str = f"Ab {von_str}"
        elif bis_str: verfuegbar_str = f"Bis {bis_str}"
        else: verfuegbar_str = "Ganzj√§hrig verf√ºgbar"
    except Exception: verfuegbar_str = "Datumsinfo fehlerhaft"

    # --- Expander erstellen ---
    expander_label = f"{name} ({art_str} in {ort_str} | {preis_str})"
    with st.expander(expander_label, expanded=is_expanded):

        # *** Layout Block 1: Wetter (links) und Buttons (rechts) ***
        col1, col2 = st.columns([1, 1]) # Zwei gleich breite Spalten

        with col1: # Linke Spalte f√ºr Wetter
            st.markdown("**Wetter am Standort (ca. Mittag):**")
            if pd.notna(loc_temp_val) and pd.notna(loc_desc_val):
                loc_temp_str = f"{loc_temp_val:.1f}¬∞C"
                loc_icon_url = f"http://openweathermap.org/img/wn/{loc_icon_val}.png" if pd.notna(loc_icon_val) else None
                w_col1, w_col2 = st.columns([0.2, 0.8])
                with w_col1:
                    if loc_icon_url: st.image(loc_icon_url, width=40)
                with w_col2:
                    st.write(f"{loc_temp_str}, {loc_desc_val}")
            elif pd.notna(weather_note) and "Koordinaten fehlen" in weather_note:
                st.caption(weather_note)
            elif openweathermap_api_configured:
                st.caption("Wetterdaten f√ºr Standort nicht verf√ºgbar.")
            if pd.notna(weather_note) and "Koordinaten fehlen" not in weather_note:
                st.warning(weather_note)

        with col2: # Rechte Spalte f√ºr Buttons
             st.markdown("**Aktionen:**") # √úberschrift hinzugef√ºgt f√ºr Konsistenz
             # Buttons nebeneinander in 3 (Unter-)Spalten
             btn_cols = st.columns(3)
             with btn_cols[0]: # Fokus-Button
                 focus_key = f"btn_focus_{key_prefix}_{activity_id}"
                 if st.button("üìç Fokus", key=focus_key, help="Auf Karte fokussieren"):
                     st.session_state[config.STATE_SELECTED_ACTIVITY_INDEX] = activity_id
                     st.rerun()
             with btn_cols[1]: # Web-Button
                 if pd.notna(website_str) and isinstance(website_str, str) and website_str.startswith('http'):
                     st.link_button("üåê Web", website_str, help="Website besuchen")
                 else:
                     st.button("üåê Web", disabled=True, help="Keine Website verf√ºgbar", key=f"btn_web_disabled_{key_prefix}_{activity_id}")
             with btn_cols[2]: # Maps-Button
                 if pd.notna(latitude) and pd.notna(longitude):
                     try:
                         # Verwendung des Standard-Google Maps Links
                         maps_url = f"https://www.google.com/maps/search/?api=1&query={float(latitude)},{float(longitude)}"
                         st.link_button("üó∫Ô∏è Maps", maps_url, help="Auf Google Maps anzeigen")
                     except (ValueError, TypeError):
                         st.button("üó∫Ô∏è Maps", disabled=True, help="Ung√ºltige Koordinaten", key=f"btn_maps_disabled_invalid_{key_prefix}_{activity_id}")
                 else:
                     st.button("üó∫Ô∏è Maps", disabled=True, help="Keine Koordinaten verf√ºgbar", key=f"btn_maps_disabled_missing_{key_prefix}_{activity_id}")

        st.markdown("---") # Trennlinie

        # *** Layout Block 2: Bild (links) und Beschreibung (rechts) ***
        # Verwende Verh√§ltnis 1:2, damit Beschreibung mehr Platz hat
        col3, col4 = st.columns([1, 2])

        with col3: # Linke, schmalere Spalte f√ºr Bild
            if pd.notna(image_url) and isinstance(image_url, str) and image_url.startswith('http'):
                st.image(image_url, caption=f"Bild: {name}", use_container_width=True)
            else:
                st.caption("Kein Bild verf√ºgbar")

        with col4: # Rechte, breitere Spalte f√ºr Beschreibung
            st.markdown(f"**Beschreibung:**")
            st.markdown(beschreibung_str if pd.notna(beschreibung_str) else "_Keine Beschreibung vorhanden._")

        st.markdown("---") # Trennlinie

        # *** Layout Block 3: Weitere Details ***
        # Aufgeteilt in zwei gleich breite Spalten
        detail_col1, detail_col2 = st.columns(2)

        with detail_col1: # Linke Spalte f√ºr Details
            st.markdown(f"**Art:** {art_str}")
            st.markdown(f"**Ort:** {ort_str}")
            # Optional: Adresse anzeigen, falls vorhanden
            # adresse_str = activity_row.get(config.COL_ADRESSE)
            # if pd.notna(adresse_str): st.markdown(f"**Adresse:** {adresse_str}")
            st.markdown(f"**Typ:** {indoor_outdoor_str}")
            st.markdown(f"**Bevorzugtes Wetter:** {wetter_pref_str}")
            # Zielgruppe wieder hier anzeigen (wie im Original?)
            if pd.notna(zielgruppe_str):
                st.markdown(f"**Zielgruppe:** {zielgruppe_str}")

        with detail_col2: # Rechte Spalte f√ºr Details
            st.markdown(f"**Dauer ca.:** {dauer_str}")
            st.markdown(f"**Verf√ºgbar:** {verfuegbar_str}")
            # Zeige Buchungsinfo und Telefon nur an, wenn vorhanden
            if pd.notna(booking_str):
                st.markdown(f"**Buchung:** {booking_str}")
            if pd.notna(kontakt_str):
                st.markdown(f"**Tel:** {kontakt_str}")

def display_recommendation_card(
    activity_row: pd.Series, # Daten der Aktivit√§t
    card_key_suffix: str, # Suffix f√ºr eindeutige Button-Keys
    on_like_callback: Callable[[int, int], None], # Funktion, die bei Klick aufgerufen wird (erwartet ID und Rating)
    on_dislike_callback: Callable[[int, int], None] # Funktion, die bei Klick aufgerufen wird (erwartet ID und Rating)
    ) -> None:
    """
    Zeigt eine Aktivit√§t als "Karte" mit Bild, Text und Like/Dislike-Buttons an.

    Wird im Personalisierungs-Expander verwendet, um dem Nutzer Aktivit√§ten
    zum Bewerten vorzuschlagen.

    Args:
        activity_row (pd.Series): Die Datenzeile der anzuzeigenden Aktivit√§t.
        card_key_suffix (str): Ein Suffix, um die Keys der Buttons eindeutig zu machen.
        on_like_callback (Callable[[int, int], None]): Die Funktion (aus app.py), die
                                                ausgef√ºhrt werden soll, wenn der
                                                Like-Button geklickt wird. Erwartet ID und Rating (1).
        on_dislike_callback (Callable[[int, int], None]): Die Funktion (aus app.py), die
                                                   ausgef√ºhrt werden soll, wenn der
                                                   Dislike-Button geklickt wird. Erwartet ID und Rating (-1).
    """
    # Hole ben√∂tigte Daten aus der Zeile
    activity_id = activity_row.get(config.COL_ID)
    name = activity_row.get(config.COL_NAME, "Unbekannte Aktivit√§t")
    image_url = activity_row.get(config.COL_IMAGE_URL)
    description = activity_row.get(config.COL_BESCHREIBUNG, "Keine Beschreibung.")

    # Stelle sicher, dass die ID eine g√ºltige Zahl ist f√ºr die Callback-Funktionen
    try:
        activity_id_for_callback = int(activity_id)
        button_disabled = False # Buttons aktivieren
    except (ValueError, TypeError):
        print(f"WARNUNG (RecCard): Ung√ºltige ID '{activity_id}'. Buttons deaktiviert.") # Log f√ºr Entwickler
        activity_id_for_callback = -1 # Ung√ºltiger Wert
        button_disabled = True # Buttons deaktivieren

    # K√ºrze lange Beschreibungen f√ºr die Kartenansicht
    max_desc_length = 100
    short_description = description
    if pd.notna(description) and len(description) > max_desc_length:
        short_description = description[:max_desc_length].strip() + "..."

    # Erstelle einen Container mit Rahmen f√ºr die Karte
    with st.container(border=True):
        # Zeige Bild, wenn vorhanden
        if pd.notna(image_url) and isinstance(image_url, str) and image_url.startswith('http'):
            st.image(image_url, use_container_width=True)
        else:
            st.caption("Kein Bild") # Platzhalter
        # Zeige Name und gek√ºrzte Beschreibung
        st.subheader(name)
        st.markdown(short_description)
        st.markdown("---") # Trennlinie
        # Zeige Like/Dislike Buttons nebeneinander
        col1, col2 = st.columns(2)
        with col1:
            # Wichtig: on_click √ºbergibt die Callback-Funktion. args √ºbergibt die Argumente.
            st.button("üëç Gef√§llt mir",
                      key=f"btn_like_{card_key_suffix}_{activity_id}", # Eindeutiger Key
                      use_container_width=True, # Button f√ºllt Spaltenbreite
                      on_click=on_like_callback, # Funktion, die bei Klick aufgerufen wird
                      args=(activity_id_for_callback, 1), # *** KORRIGIERT: ID und Rating 1 √ºbergeben ***
                      disabled=button_disabled) # Deaktivieren bei ung√ºltiger ID
        with col2:
            st.button("üëé Eher nicht",
                      key=f"btn_dislike_{card_key_suffix}_{activity_id}",
                      use_container_width=True,
                      on_click=on_dislike_callback,
                      args=(activity_id_for_callback, -1), # *** KORRIGIERT: ID und Rating -1 √ºbergeben ***
                      disabled=button_disabled)

def display_preference_visualization(
    profile_label: Optional[str], # Das generierte Profil-Label (z.B. "Kultur-Fan")
    preference_scores_art: Optional[pd.Series], # Gez√§hlte Likes pro Aktivit√§tsart
    top_target_groups: Optional[pd.Series], # Gez√§hlte Likes pro Zielgruppe
    liked_prices_list: Optional[List[float]] # Liste der Preise geliketer Aktivit√§ten
    ) -> None:
    """
    Zeigt eine Visualisierung der gelernten Nutzerpr√§ferenzen an.

    Stellt das Profil-Label, ein Kuchendiagramm f√ºr bevorzugte Aktivit√§tsarten,
    ein Balkendiagramm f√ºr bevorzugte Zielgruppen und ein Histogramm f√ºr die
    Preisverteilung der gelikten Aktivit√§ten dar.

    Args:
        profile_label (Optional[str]): Das Text-Label f√ºr das Profil.
        preference_scores_art (Optional[pd.Series]): Series mit Aktivit√§tsarten als Index
                                                     und Anzahl Likes als Werte.
        top_target_groups (Optional[pd.Series]): Series mit Zielgruppen als Index
                                                  und Anzahl Likes als Werte.
        liked_prices_list (Optional[List[float]]): Liste der Preise der gelikten Aktivit√§ten.
    """
    # Zeige das generierte Profil-Label an, falls vorhanden
    if profile_label:
        st.info(f"Dein gelerntes Profil: **{profile_label}**")

    # Layout mit zwei Spalten f√ºr die ersten beiden Diagramme
    col1, col2 = st.columns(2)

    # Linke Spalte: Kuchendiagramm f√ºr Aktivit√§tsarten
    with col1:
        st.markdown("**Bevorzugte Aktivit√§tsarten:**")
        # Pr√ºfe, ob Daten f√ºr das Diagramm vorhanden sind
        if preference_scores_art is None or preference_scores_art.empty:
            st.caption("Bewerte Aktivit√§ten üëç, um deine bevorzugten Arten zu sehen.")
        else:
            # Zeige nur Arten mit mindestens einem Like im Diagramm
            scores_to_display = preference_scores_art[preference_scores_art > 0]
            if scores_to_display.empty:
                st.caption("Bewerte Aktivit√§ten üëç, um deine bevorzugten Arten zu sehen.")
            else:
                try:
                    # Erstelle das Plotly Kuchendiagramm
                    fig_pie = go.Figure(data=[go.Pie(labels=scores_to_display.index,
                                                     values=scores_to_display.values,
                                                     hole=.3)]) # Kleines Loch in der Mitte
                    # Konfiguriere Layout (Gr√∂√üe, R√§nder, Legende ausblenden)
                    fig_pie.update_layout(margin=dict(l=10, r=10, t=30, b=20), showlegend=False, height=250)
                    # Zeige Prozent und Label im Diagramm an
                    fig_pie.update_traces(textposition='inside', textinfo='percent+label')
                    # Zeige das Diagramm in Streamlit an
                    st.plotly_chart(fig_pie, use_container_width=True)
                except Exception as e:
                    st.error(f"Fehler beim Erstellen des Kuchendiagramms: {e}")

    # Rechte Spalte: Balkendiagramm f√ºr Zielgruppen
    with col2:
        st.markdown("**Bevorzugte Zielgruppen:**")
        # Pr√ºfe, ob Daten vorhanden sind
        if top_target_groups is None or top_target_groups.empty:
            st.caption("Bewerte Aktivit√§ten üëç, um deine bevorzugten Zielgruppen zu sehen.")
        else:
            try:
                # Zeige einfaches Balkendiagramm mit Streamlit Bordmitteln
                st.bar_chart(top_target_groups, height=230)
            except Exception as e:
                st.error(f"Fehler beim Erstellen des Zielgruppen-Diagramms: {e}")

    # Unter den Spalten: Histogramm f√ºr Preise
    st.markdown("**Preisverteilung deiner Favoriten:**")
    # Pr√ºfe, ob Preisdaten vorhanden sind
    if liked_prices_list is None or not liked_prices_list:
        st.caption("Bewerte kostenpflichtige Aktivit√§ten üëç, um die Preisverteilung zu sehen.")
    else:
        try:
            # Erstelle das Plotly Histogramm
            fig_hist = go.Figure(data=[go.Histogram(x=liked_prices_list, nbinsx=10)]) # 10 Balken
            # Konfiguriere Layout (Achsenbeschriftung, H√∂he, R√§nder)
            fig_hist.update_layout(xaxis_title_text='Preis (CHF)', yaxis_title_text='Anzahl',
                                   bargap=0.1, height=250, margin=dict(l=10, r=10, t=10, b=20))
            # Zeige das Diagramm in Streamlit an
            st.plotly_chart(fig_hist, use_container_width=True)
        except Exception as e:
            st.error(f"Fehler beim Erstellen des Preis-Histogramms: {e}")

    st.markdown("---") # Trennlinie am Ende des Expanders